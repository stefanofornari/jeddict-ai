/**
 * Copyright 2025 the original author or authors from the Jeddict project (https://jeddict.github.io/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.github.jeddict.ai.components.diff;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.ActionMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import org.netbeans.api.diff.DiffController;
import org.netbeans.api.diff.StreamSource;
import org.openide.awt.UndoRedo;
import org.openide.cookies.SaveCookie;
import org.openide.filesystems.FileObject;
import org.openide.loaders.DataObject;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Utilities;

/**
 * A DiffView inspired by org.netbeans.modules.diff.builtin.SingleDiffPanel
 * which is an internal class and therefore a brittle dependency. It also
 * gives the basis to build specific functionality for Jeddict or cleaning
 * up the UI removed unused functionalities.
 *
 */
public class DiffView extends JPanel implements PropertyChangeListener {

    private static final Logger LOG = Logger.getLogger(DiffView.class.getCanonicalName());

    private DiffController ctrl;
    private StreamSource baseSource;
    private DataObject dataObject;

    /**
     * Creates new form SingleDiffPanel
     */
    protected DiffView() {
        initComponents();
        initKeyBindings();
    }

    public DiffView(final StreamSource modifiedSource, final StreamSource baseSource)
    throws IOException {
        this();

        this.baseSource = baseSource;

        ctrl = DiffController.createEnhanced(modifiedSource, baseSource);

        initMyComponents();
        refreshComponents();
    }

    public DiffView(final StreamSource modifiedSource, final FileStreamSource baseSource)
    throws IOException {
        this(modifiedSource, (StreamSource)baseSource);

        //
        // find should not return null, it throws a DataObjectNotFoundException
        // if the object is not found
        //
        dataObject = DataObject.find(baseSource.fileObject);
        dataObject.addPropertyChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionsToolbar = new javax.swing.JToolBar();
        btnNext = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        sourceDiffPanel = new javax.swing.JPanel();

        actionsToolbar.setRollover(true);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/diff/builtin/visualizer/editable/diff-next.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNext, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnNext.text")); // NOI18N
        btnNext.setToolTipText(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnNext.toolTipText")); // NOI18N
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnNext);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/diff/builtin/visualizer/editable/diff-prev.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnPrev, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnPrev.text")); // NOI18N
        btnPrev.setToolTipText(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnPrev.toolTipText")); // NOI18N
        btnPrev.setFocusable(false);
        btnPrev.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrev.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnPrev);
        actionsToolbar.add(jSeparator1);

        btnUndo.setIcon(ImageUtilities.loadImageIcon("org/openide/resources/actions/undo.gif", false));
        org.openide.awt.Mnemonics.setLocalizedText(btnUndo, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnUndo.text")); // NOI18N
        btnUndo.setFocusable(false);
        btnUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnUndo);

        btnRedo.setIcon(ImageUtilities.loadImageIcon("org/openide/resources/actions/redo.gif", false));
        org.openide.awt.Mnemonics.setLocalizedText(btnRedo, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnRedo.text")); // NOI18N
        btnRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedoActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnRedo);
        actionsToolbar.add(jSeparator2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnSave.toolTipText")); // NOI18N
        btnSave.setEnabled(false);
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnSave);

        btnClose.setFont(new java.awt.Font("Fira Sans", 1, 18)); // NOI18N
        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/close.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnClose, org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnClose.text")); // NOI18N
        btnClose.setToolTipText(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnClose.toolTipText")); // NOI18N
        btnClose.setActionCommand(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnClose.actionCommand")); // NOI18N
        btnClose.setFocusable(false);
        btnClose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClose.setLabel(org.openide.util.NbBundle.getMessage(DiffView.class, "DiffView.btnClose.label")); // NOI18N
        btnClose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        actionsToolbar.add(btnClose);

        sourceDiffPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceDiffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
            .addComponent(actionsToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(actionsToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sourceDiffPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        int idx = ctrl.getDifferenceIndex();
        if (idx < ctrl.getDifferenceCount() - 1) {
            ctrl.setLocation(DiffController.DiffPane.Modified, DiffController.LocationType.DifferenceIndex, idx + 1);
        }
        refreshComponents();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        int idx = ctrl.getDifferenceIndex();
        if (idx > 0) {
            ctrl.setLocation(DiffController.DiffPane.Modified, DiffController.LocationType.DifferenceIndex, idx - 1);
        }
        refreshComponents();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveBase();
        refreshComponents();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        getParent().remove(this);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        UndoRedo unredo = getUndoRedo();

        if (unredo.canUndo()) {
            unredo.undo();
        }
    }//GEN-LAST:event_btnUndoActionPerformed

    private void btnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedoActionPerformed
        UndoRedo unredo = getUndoRedo();
        if (unredo.canRedo()) {
            unredo.redo();
        }
    }//GEN-LAST:event_btnRedoActionPerformed

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        refreshComponents();
    }

    public UndoRedo getUndoRedo() {
        UndoRedo undoRedo =
            (UndoRedo) ctrl.getJComponent().getClientProperty(UndoRedo.class);

        LOG.finest(() -> "(un/re)do: " + undoRedo);

        if (undoRedo != null) {
            undoRedo.addChangeListener((event) -> {
                LOG.finest(() -> String.valueOf(event));
            });
        }

        return undoRedo;
    }

    /**
     * Save the content of the base file. This method is public to allow classes
     * using it to save the content from outside the DiffView.
     */
    public void saveBase() {
        if (!isEditable()) {
            throw new IllegalStateException("base source is not editable, it can not be saved");
        }

        try {
            SaveCookie saveCookie = dataObject.getLookup().lookup(SaveCookie.class);

            // If there are unsaved changes, save the file
            if (saveCookie != null) {
                saveCookie.save();
            }
        } catch (IOException x) {
            LOG.severe(() -> "error saving base " + baseSource + ": " + x.getMessage());
            Exceptions.printStackTrace(x);
        }
    }

    // --------------------------------------------------------- private methods

    private void initMyComponents() {
        //
        // If the modified source is a FileStreamSource we can make the diff
        // editable and we can refresh the underling file.
        //
        FileObject file = getFileObject();
        if (file != null) {
            file.refresh();
        }

        ctrl.addPropertyChangeListener(this);

        JComponent diffView = ctrl.getJComponent();
        sourceDiffPanel.add(BorderLayout.CENTER, diffView);
        setName(diffView.getName());
        Container c = getParent();
        if (c != null) {
            c.setName(getName());
        }
    }

    private void refreshComponents() {
        btnNext.setEnabled(ctrl.getDifferenceIndex() < ctrl.getDifferenceCount() - 1);
        btnPrev.setEnabled(ctrl.getDifferenceIndex() > 0);
        btnSave.setEnabled(isModified());

        //
        // Using invokeLater otherwise it won't work well
        //
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    UndoRedo ur = getUndoRedo();

                    btnUndo.setEnabled(ur.canUndo());
                    btnRedo.setEnabled(ur.canRedo());
                }
            }
        );
    }

    private boolean isEditable() {
        return (baseSource instanceof FileStreamSource) &&
            dataObject != null;
    }

    private boolean isModified() {
        return isEditable() && (dataObject != null) && dataObject.isModified();
    }

    private FileObject getFileObject() {
        if (baseSource instanceof FileStreamSource) {
            return ((FileStreamSource)baseSource).fileObject;
        }

        return null;
    }

    /**
     * Adds key bindings to invoke "save" with Ctrl-S, Undo with Ctrl-Z and Redo with Ctrl-Shift-Z.
     */
    private void initKeyBindings() {
        // Save only if editable and modified
        final InputMap inputMap = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        final ActionMap actionMap = getActionMap();

        // Add Save Ctrl-S
        KeyStroke ks = Utilities.stringToKey("D-S");
        inputMap.put(ks, "saveAction");
        actionMap.put("saveAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnSave.isEnabled()) {
                    btnSave.doClick();
                }
            }
        });

        //
        // BUG: for some reason, while Ctrl-S works, Ctrl-Z and Ctrl-Y do not :(
        //

        // Add Undo Ctrl-Z
        ks = Utilities.stringToKey("D-Z");
        inputMap.put(ks, "undoAction");
        actionMap.put("undoAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LOG.finest(() -> "Ctrl-Z, let's undo");
                if (btnUndo.isEnabled()) {
                    btnUndo.doClick();
                }
            }
        });

        // Add Redo Ctrl-Shift-Z
        ks = Utilities.stringToKey("D-S-Z");
        inputMap.put(ks, "redoAction");
        actionMap.put("redoAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LOG.finest(() -> "Ctrl-Shift-Z, let's redo");
                if (btnRedo.isEnabled()) {
                    btnRedo.doClick();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar actionsToolbar;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndo;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPanel sourceDiffPanel;
    // End of variables declaration//GEN-END:variables
}
